{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js\";\nimport React, { Component } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ComponentImport extends Component {\n  render() {\n    // const fileData = {};\n    // const processExcelFile = (data) => {\n    //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n    //   const wsName = worlkBook.SheetNames[0];\n    //   const ws = worlkBook.Sheets[wsName];\n    //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //   console.log({ dataParse });\n    //   // var AllSheetName = worlkBook.SheetNames;\n    //   debugger;\n    // };\n    // const fileSelect = (e) => {\n    //   const files = e.target.files;\n    //   fileData[\"fileName\"] = files[0].name;\n    //   const reader = new FileReader();\n    //   if (typeof FileList != \"undefined\") {\n    //     if (reader.readAsBinaryString) {\n    //       reader.onload = function (e) {\n    //         processExcelFile(e.target.result);\n    //       };\n    //     }\n    //   } else {\n    //     reader.onload = function (e) {\n    //       const data = \"\";\n    //       const bytes = new Uint8Array(e.target.result);\n    //       for (var i = 0; i < bytes.byteLength; i++) {\n    //         data += String.fromCharCode(bytes[i]);\n    //       }\n    //       processExcelFile(data);\n    //     };\n    //   }\n    //   // console.log(files);\n    // };\n    //f = file\n    // const fileSelect = (file) => {\n    //   var name = file.name;\n    //   const reader = new FileReader();\n    //   reader.onload = (evt) => {\n    //     // evt = on_file_select event\n    //     /* Parse data */\n    //     const bstr = evt.target.result;\n    //     const wb = XLSX.read(bstr, { type: \"binary\" });\n    //     /* Get first worksheet */\n    //     const wsname = wb.SheetNames[0];\n    //     const ws = wb.Sheets[wsname];\n    //     /* Convert array of arrays */\n    //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n    //     /* Update state */\n    //     console.log(\"Data>>>\" + data);\n    //   };\n    //   reader.readAsBinaryString(file);\n    // };\n    // const handleUpload = (e) => {\n    //   e.preventDefault();\n    //   var files = e.target.files,\n    //     f = files[0];\n    //   var reader = new FileReader();\n    //   reader.onload = function (e) {\n    //     var data = e.target.result;\n    //     let readedData = XLSX.read(data, { type: \"binary\" });\n    //     const wsname = readedData.SheetNames[0];\n    //     const ws = readedData.Sheets[wsname];\n    //     /* Convert array to json*/\n    //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //     setFileUploaded(dataParse);\n    //   };\n    //   reader.readAsBinaryString(f);\n    // };\n    const [data, setData] = React.useState([]);\n    const [cols, setCols] = React.useState([]);\n\n    const handleFile = file => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        /* Parse data */\n        const ab = e.target.result;\n        const wb = XLSX.read(ab, {\n          type: \"array\"\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1\n        });\n        /* Update state */\n\n        setData(data);\n        setCols(make_cols(ws[\"!ref\"]));\n      };\n\n      reader.readAsArrayBuffer(file);\n    };\n\n    const exportFile = () => {\n      /* convert state to workbook */\n      const ws = XLSX.utils.aoa_to_sheet(data);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n      /* generate XLSX file and send to client */\n\n      XLSX.writeFile(wb, \"sheetjs.xlsx\");\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport default ComponentImport;","map":{"version":3,"names":["React","Component","XLSX","ComponentImport","render","data","setData","useState","cols","setCols","handleFile","file","reader","FileReader","onload","e","ab","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","make_cols","readAsArrayBuffer","exportFile","aoa_to_sheet","book_new","book_append_sheet","writeFile"],"sources":["/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\n\nexport class ComponentImport extends Component {\n  render() {\n    // const fileData = {};\n\n    // const processExcelFile = (data) => {\n    //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n    //   const wsName = worlkBook.SheetNames[0];\n    //   const ws = worlkBook.Sheets[wsName];\n    //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //   console.log({ dataParse });\n    //   // var AllSheetName = worlkBook.SheetNames;\n    //   debugger;\n    // };\n\n    // const fileSelect = (e) => {\n    //   const files = e.target.files;\n    //   fileData[\"fileName\"] = files[0].name;\n\n    //   const reader = new FileReader();\n    //   if (typeof FileList != \"undefined\") {\n    //     if (reader.readAsBinaryString) {\n    //       reader.onload = function (e) {\n    //         processExcelFile(e.target.result);\n    //       };\n    //     }\n    //   } else {\n    //     reader.onload = function (e) {\n    //       const data = \"\";\n    //       const bytes = new Uint8Array(e.target.result);\n    //       for (var i = 0; i < bytes.byteLength; i++) {\n    //         data += String.fromCharCode(bytes[i]);\n    //       }\n    //       processExcelFile(data);\n    //     };\n    //   }\n    //   // console.log(files);\n    // };\n\n    //f = file\n\n    // const fileSelect = (file) => {\n    //   var name = file.name;\n    //   const reader = new FileReader();\n    //   reader.onload = (evt) => {\n    //     // evt = on_file_select event\n    //     /* Parse data */\n    //     const bstr = evt.target.result;\n    //     const wb = XLSX.read(bstr, { type: \"binary\" });\n    //     /* Get first worksheet */\n    //     const wsname = wb.SheetNames[0];\n    //     const ws = wb.Sheets[wsname];\n    //     /* Convert array of arrays */\n    //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n    //     /* Update state */\n    //     console.log(\"Data>>>\" + data);\n    //   };\n    //   reader.readAsBinaryString(file);\n    // };\n\n    // const handleUpload = (e) => {\n    //   e.preventDefault();\n\n    //   var files = e.target.files,\n    //     f = files[0];\n    //   var reader = new FileReader();\n    //   reader.onload = function (e) {\n    //     var data = e.target.result;\n    //     let readedData = XLSX.read(data, { type: \"binary\" });\n    //     const wsname = readedData.SheetNames[0];\n    //     const ws = readedData.Sheets[wsname];\n\n    //     /* Convert array to json*/\n    //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //     setFileUploaded(dataParse);\n    //   };\n    //   reader.readAsBinaryString(f);\n    // };\n\n    const [data, setData] = React.useState([]);\n    const [cols, setCols] = React.useState([]);\n\n    const handleFile = (file) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        /* Parse data */\n        const ab = e.target.result;\n        const wb = XLSX.read(ab, { type: \"array\" });\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n        /* Update state */\n        setData(data);\n        setCols(make_cols(ws[\"!ref\"]));\n      };\n      reader.readAsArrayBuffer(file);\n    };\n\n    const exportFile = () => {\n      /* convert state to workbook */\n      const ws = XLSX.utils.aoa_to_sheet(data);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n      /* generate XLSX file and send to client */\n      XLSX.writeFile(wb, \"sheetjs.xlsx\");\n    };\n\n    return (\n      <>\n        <div className=\"content\">\n          <input type=\"file\" onChange={handleFile}></input>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ComponentImport;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,uBAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;;AAEA,OAAO,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;EAC7CG,MAAM,GAAG;IACP;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAAxB;IACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACO,QAAN,CAAe,EAAf,CAAxB;;IAEA,MAAMG,UAAU,GAAIC,IAAD,IAAU;MAC3B,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;MACAD,MAAM,CAACE,MAAP,GAAiBC,CAAD,IAAO;QACrB;QACA,MAAMC,EAAE,GAAGD,CAAC,CAACE,MAAF,CAASC,MAApB;QACA,MAAMC,EAAE,GAAGjB,IAAI,CAACkB,IAAL,CAAUJ,EAAV,EAAc;UAAEK,IAAI,EAAE;QAAR,CAAd,CAAX;QACA;;QACA,MAAMC,MAAM,GAAGH,EAAE,CAACI,UAAH,CAAc,CAAd,CAAf;QACA,MAAMC,EAAE,GAAGL,EAAE,CAACM,MAAH,CAAUH,MAAV,CAAX;QACA;;QACA,MAAMjB,IAAI,GAAGH,IAAI,CAACwB,KAAL,CAAWC,aAAX,CAAyBH,EAAzB,EAA6B;UAAEI,MAAM,EAAE;QAAV,CAA7B,CAAb;QACA;;QACAtB,OAAO,CAACD,IAAD,CAAP;QACAI,OAAO,CAACoB,SAAS,CAACL,EAAE,CAAC,MAAD,CAAH,CAAV,CAAP;MACD,CAZD;;MAaAZ,MAAM,CAACkB,iBAAP,CAAyBnB,IAAzB;IACD,CAhBD;;IAkBA,MAAMoB,UAAU,GAAG,MAAM;MACvB;MACA,MAAMP,EAAE,GAAGtB,IAAI,CAACwB,KAAL,CAAWM,YAAX,CAAwB3B,IAAxB,CAAX;MACA,MAAMc,EAAE,GAAGjB,IAAI,CAACwB,KAAL,CAAWO,QAAX,EAAX;MACA/B,IAAI,CAACwB,KAAL,CAAWQ,iBAAX,CAA6Bf,EAA7B,EAAiCK,EAAjC,EAAqC,SAArC;MACA;;MACAtB,IAAI,CAACiC,SAAL,CAAehB,EAAf,EAAmB,cAAnB;IACD,CAPD;;IASA,oBACE;MAAA,uBACE;QAAK,SAAS,EAAC,SAAf;QAAA,uBACE;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAET;QAA7B;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF,iBADF;EAOD;;AAnH4C;AAsH/C,eAAeP,eAAf"},"metadata":{},"sourceType":"module"}