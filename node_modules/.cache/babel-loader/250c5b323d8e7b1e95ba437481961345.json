{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ComponentImport() {\n  _s();\n\n  const [selectFile, setSeclectFie] = useState();\n\n  function safe_decode_range(range) {\n    var o = {\n      s: {\n        c: 0,\n        r: 0\n      },\n      e: {\n        c: 0,\n        r: 0\n      }\n    };\n    var idx = 0,\n        i = 0,\n        cc = 0;\n    var len = range.length;\n\n    for (idx = 0; i < len; ++i) {\n      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n      idx = 26 * idx + cc;\n    }\n\n    o.s.c = --idx;\n\n    for (idx = 0; i < len; ++i) {\n      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n      idx = 10 * idx + cc;\n    }\n\n    o.s.r = --idx;\n\n    if (i === len || range.charCodeAt(++i) === 58) {\n      o.e.c = o.s.c;\n      o.e.r = o.s.r;\n      return o;\n    }\n\n    for (idx = 0; i != len; ++i) {\n      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n      idx = 26 * idx + cc;\n    }\n\n    o.e.c = --idx;\n\n    for (idx = 0; i != len; ++i) {\n      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n      idx = 10 * idx + cc;\n    }\n\n    o.e.r = --idx;\n    return o;\n  } // const fileSelect = (e) => {\n  //   e.preventDefault();\n  //   if (selectFile) {\n  //     if (\n  //       selectFile.type ===\n  //       \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n  //     ) {\n  //       const files = e.target.files;\n  //       const reader = new FileReader();\n  //       reader.onload = function (e) {\n  //         const data = \"\";\n  //         const bytes = new Uint8Array(e.target.result);\n  //         for (var i = 0; i < bytes.byteLength; i++) {\n  //           data += String.fromCharCode(bytes[i]);\n  //         }\n  //         const bstr = e.target.result;\n  //         const workbook = XLSX.read(bstr, {\n  //           type: \"binary\",\n  //         });\n  //         const wsname = workbook.SheetNames[0];\n  //         const ws = workbook.Sheets[wsname];\n  //         const convertData = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //         console.log(\"data : \" + convertData);\n  //       };\n  //       reader.readAsBinaryString(selectFile);\n  //     } else {\n  //       alert(\"File phải là định dạng .xlsx\");\n  //     }\n  //   }\n  // };\n  // const processExcelFile = (data) => {\n  //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n  //   const wsName = worlkBook.SheetNames[0];\n  //   const ws = worlkBook.Sheets[wsName];\n  //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //   console.log({ dataParse });\n  //   // var AllSheetName = worlkBook.SheetNames;\n  //   debugger;\n  // };\n  //   e.preventDefault();\n  //   const files = e.target.files;\n  //   const reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     console.log(e.target.result);\n  //     const data = \"\";\n  //     const bytes = new Uint8Array(e.target.result);\n  //     for (var i = 0; i < bytes.byteLength; i++) {\n  //       data += String.fromCharCode(bytes[i]);\n  //     }\n  //     const bstr = e.target.result;\n  //     const workbook = XLSX.read(bstr, {\n  //       type: \"binary\",\n  //     });\n  //     console.log(workbook);\n  //     // processExcelFile(data);\n  //   };\n  //   reader.readAsBinaryString(files[0]);\n  // };\n  //f = file\n  // const fileSelect = (file) => {\n  //   var name = file.name;\n  //   const reader = new FileReader();\n  //   reader.onload = (evt) => {\n  //     // evt = on_file_select event\n  //     /* Parse data */\n  //     const bstr = evt.target.result;\n  //     const wb = XLSX.read(bstr, { type: \"binary\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //     /* Update state */\n  //     console.log(\"Data>>>\" + data);\n  //   };\n  //   reader.readAsBinaryString(file);\n  //   console.log(name);\n  // };\n  // const handleUpload = (e) => {\n  //   e.preventDefault();\n  //   var files = e.target.files,\n  //     f = files[0];\n  //   var reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     var data = e.target.result;\n  //     let readedData = XLSX.read(data, { type: \"binary\" });\n  //     const wsname = readedData.SheetNames[0];\n  //     const ws = readedData.Sheets[wsname];\n  //     /* Convert array to json*/\n  //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     setFileUploaded(dataParse);\n  //   };\n  //   reader.readAsBinaryString(f);\n  // };\n  // const [data, setData] = React.useState([]);\n  // const [cols, setCols] = React.useState([]);\n  // const handleFile = (file) => {\n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     /* Parse data */\n  //     const ab = e.target.result;\n  //     const wb = XLSX.read(ab, { type: \"array\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     /* Update state */\n  //     setData(data);\n  //     setCols(make_cols(ws[\"!ref\"]));\n  //   };\n  //   reader.readAsArrayBuffer(file);\n  // };\n  // const exportFile = () => {\n  //   /* convert state to workbook */\n  //   const ws = XLSX.utils.aoa_to_sheet(data);\n  //   const wb = XLSX.utils.book_new();\n  //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n  //   /* generate XLSX file and send to client */\n  //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => {\n          setSeclectFie(e.target.files[0]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fileSelect,\n        children: \"import\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ComponentImport, \"Hbec3m83DA8La9W4rK65sQvOVtU=\");\n\n_c = ComponentImport;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentImport\");","map":{"version":3,"names":["useState","XLSX","ComponentImport","selectFile","setSeclectFie","safe_decode_range","range","o","s","c","r","e","idx","i","cc","len","length","charCodeAt","target","files","fileSelect"],"sources":["/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\n\nexport default function ComponentImport() {\n  const [selectFile, setSeclectFie] = useState();\n\n  function safe_decode_range(range) {\n    var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };\n    var idx = 0,\n      i = 0,\n      cc = 0;\n    var len = range.length;\n    for (idx = 0; i < len; ++i) {\n      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n      idx = 26 * idx + cc;\n    }\n    o.s.c = --idx;\n\n    for (idx = 0; i < len; ++i) {\n      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n      idx = 10 * idx + cc;\n    }\n    o.s.r = --idx;\n\n    if (i === len || range.charCodeAt(++i) === 58) {\n      o.e.c = o.s.c;\n      o.e.r = o.s.r;\n      return o;\n    }\n\n    for (idx = 0; i != len; ++i) {\n      if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n      idx = 26 * idx + cc;\n    }\n    o.e.c = --idx;\n\n    for (idx = 0; i != len; ++i) {\n      if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n      idx = 10 * idx + cc;\n    }\n    o.e.r = --idx;\n    return o;\n  }\n  // const fileSelect = (e) => {\n  //   e.preventDefault();\n  //   if (selectFile) {\n  //     if (\n  //       selectFile.type ===\n  //       \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n  //     ) {\n  //       const files = e.target.files;\n  //       const reader = new FileReader();\n  //       reader.onload = function (e) {\n  //         const data = \"\";\n  //         const bytes = new Uint8Array(e.target.result);\n  //         for (var i = 0; i < bytes.byteLength; i++) {\n  //           data += String.fromCharCode(bytes[i]);\n  //         }\n  //         const bstr = e.target.result;\n  //         const workbook = XLSX.read(bstr, {\n  //           type: \"binary\",\n  //         });\n  //         const wsname = workbook.SheetNames[0];\n  //         const ws = workbook.Sheets[wsname];\n  //         const convertData = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //         console.log(\"data : \" + convertData);\n  //       };\n\n  //       reader.readAsBinaryString(selectFile);\n  //     } else {\n  //       alert(\"File phải là định dạng .xlsx\");\n  //     }\n  //   }\n  // };\n\n  // const processExcelFile = (data) => {\n  //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n  //   const wsName = worlkBook.SheetNames[0];\n  //   const ws = worlkBook.Sheets[wsName];\n  //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //   console.log({ dataParse });\n  //   // var AllSheetName = worlkBook.SheetNames;\n  //   debugger;\n  // };\n\n  //   e.preventDefault();\n  //   const files = e.target.files;\n  //   const reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     console.log(e.target.result);\n  //     const data = \"\";\n  //     const bytes = new Uint8Array(e.target.result);\n  //     for (var i = 0; i < bytes.byteLength; i++) {\n  //       data += String.fromCharCode(bytes[i]);\n  //     }\n  //     const bstr = e.target.result;\n  //     const workbook = XLSX.read(bstr, {\n  //       type: \"binary\",\n  //     });\n  //     console.log(workbook);\n  //     // processExcelFile(data);\n  //   };\n  //   reader.readAsBinaryString(files[0]);\n  // };\n\n  //f = file\n\n  // const fileSelect = (file) => {\n  //   var name = file.name;\n  //   const reader = new FileReader();\n  //   reader.onload = (evt) => {\n  //     // evt = on_file_select event\n  //     /* Parse data */\n  //     const bstr = evt.target.result;\n  //     const wb = XLSX.read(bstr, { type: \"binary\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //     /* Update state */\n  //     console.log(\"Data>>>\" + data);\n  //   };\n  //   reader.readAsBinaryString(file);\n  //   console.log(name);\n  // };\n\n  // const handleUpload = (e) => {\n  //   e.preventDefault();\n\n  //   var files = e.target.files,\n  //     f = files[0];\n  //   var reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     var data = e.target.result;\n  //     let readedData = XLSX.read(data, { type: \"binary\" });\n  //     const wsname = readedData.SheetNames[0];\n  //     const ws = readedData.Sheets[wsname];\n\n  //     /* Convert array to json*/\n  //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     setFileUploaded(dataParse);\n  //   };\n  //   reader.readAsBinaryString(f);\n  // };\n\n  // const [data, setData] = React.useState([]);\n  // const [cols, setCols] = React.useState([]);\n\n  // const handleFile = (file) => {\n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     /* Parse data */\n  //     const ab = e.target.result;\n  //     const wb = XLSX.read(ab, { type: \"array\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     /* Update state */\n  //     setData(data);\n  //     setCols(make_cols(ws[\"!ref\"]));\n  //   };\n  //   reader.readAsArrayBuffer(file);\n  // };\n\n  // const exportFile = () => {\n  //   /* convert state to workbook */\n  //   const ws = XLSX.utils.aoa_to_sheet(data);\n  //   const wb = XLSX.utils.book_new();\n  //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n  //   /* generate XLSX file and send to client */\n  //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  // };\n\n  return (\n    <>\n      <div className=\"content\">\n        <input\n          type=\"file\"\n          onChange={(e) => {\n            setSeclectFie(e.target.files[0]);\n          }}\n        ></input>\n        <button onClick={fileSelect}>import</button>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}