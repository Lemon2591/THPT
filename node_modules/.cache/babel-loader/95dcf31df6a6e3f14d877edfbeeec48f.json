{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js\";\nimport React, { Component } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ComponentImport extends Component {\n  render() {\n    // const fileData = {};\n    // const processExcelFile = (data) => {\n    //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n    //   const wsName = worlkBook.SheetNames[0];\n    //   const ws = worlkBook.Sheets[wsName];\n    //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //   console.log({ dataParse });\n    //   // var AllSheetName = worlkBook.SheetNames;\n    //   debugger;\n    // };\n    // const fileSelect = (e) => {\n    //   const files = e.target.files;\n    //   fileData[\"fileName\"] = files[0].name;\n    //   const reader = new FileReader();\n    //   if (typeof FileList != \"undefined\") {\n    //     if (reader.readAsBinaryString) {\n    //       reader.onload = function (e) {\n    //         processExcelFile(e.target.result);\n    //       };\n    //     }\n    //   } else {\n    //     reader.onload = function (e) {\n    //       const data = \"\";\n    //       const bytes = new Uint8Array(e.target.result);\n    //       for (var i = 0; i < bytes.byteLength; i++) {\n    //         data += String.fromCharCode(bytes[i]);\n    //       }\n    //       processExcelFile(data);\n    //     };\n    //   }\n    //   // console.log(files);\n    // };\n    //f = file\n    const fileSelect = e => {\n      var name = file.name;\n      const reader = new FileReader();\n\n      reader.onload = evt => {\n        // evt = on_file_select event\n\n        /* Parse data */\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, {\n          type: \"binary\"\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_csv(ws, {\n          header: 1\n        });\n        /* Update state */\n\n        console.log(\"Data>>>\" + data);\n      };\n\n      reader.readAsBinaryString(file);\n    };\n\n    const handleUpload = e => {\n      e.preventDefault();\n      var files = e.target.files,\n          f = files[0];\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        var data = e.target.result;\n        let readedData = XLSX.read(data, {\n          type: \"binary\"\n        });\n        const wsname = readedData.SheetNames[0];\n        const ws = readedData.Sheets[wsname];\n        /* Convert array to json*/\n\n        const dataParse = XLSX.utils.sheet_to_json(ws, {\n          header: 1\n        });\n        setFileUploaded(dataParse);\n      };\n\n      reader.readAsBinaryString(f);\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport default ComponentImport;","map":{"version":3,"names":["React","Component","XLSX","ComponentImport","render","fileSelect","e","name","file","reader","FileReader","onload","evt","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_csv","header","console","log","readAsBinaryString","handleUpload","preventDefault","files","f","readedData","dataParse","sheet_to_json","setFileUploaded"],"sources":["/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\n\nexport class ComponentImport extends Component {\n  render() {\n    // const fileData = {};\n\n    // const processExcelFile = (data) => {\n    //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n    //   const wsName = worlkBook.SheetNames[0];\n    //   const ws = worlkBook.Sheets[wsName];\n    //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //   console.log({ dataParse });\n    //   // var AllSheetName = worlkBook.SheetNames;\n    //   debugger;\n    // };\n\n    // const fileSelect = (e) => {\n    //   const files = e.target.files;\n    //   fileData[\"fileName\"] = files[0].name;\n\n    //   const reader = new FileReader();\n    //   if (typeof FileList != \"undefined\") {\n    //     if (reader.readAsBinaryString) {\n    //       reader.onload = function (e) {\n    //         processExcelFile(e.target.result);\n    //       };\n    //     }\n    //   } else {\n    //     reader.onload = function (e) {\n    //       const data = \"\";\n    //       const bytes = new Uint8Array(e.target.result);\n    //       for (var i = 0; i < bytes.byteLength; i++) {\n    //         data += String.fromCharCode(bytes[i]);\n    //       }\n    //       processExcelFile(data);\n    //     };\n    //   }\n    //   // console.log(files);\n    // };\n\n    //f = file\n\n    const fileSelect = (e) => {\n      var name = file.name;\n      const reader = new FileReader();\n      reader.onload = (evt) => {\n        // evt = on_file_select event\n        /* Parse data */\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, { type: \"binary\" });\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n        /* Update state */\n        console.log(\"Data>>>\" + data);\n      };\n      reader.readAsBinaryString(file);\n    };\n\n    const handleUpload = (e) => {\n      e.preventDefault();\n\n      var files = e.target.files,\n        f = files[0];\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var data = e.target.result;\n        let readedData = XLSX.read(data, { type: \"binary\" });\n        const wsname = readedData.SheetNames[0];\n        const ws = readedData.Sheets[wsname];\n\n        /* Convert array to json*/\n        const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n        setFileUploaded(dataParse);\n      };\n      reader.readAsBinaryString(f);\n    };\n\n    return (\n      <>\n        <div className=\"content\">\n          <input type=\"file\" onChange={handleUpload}></input>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ComponentImport;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,uBAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;;AAEA,OAAO,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;EAC7CG,MAAM,GAAG;IACP;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA,MAAMC,UAAU,GAAIC,CAAD,IAAO;MACxB,IAAIC,IAAI,GAAGC,IAAI,CAACD,IAAhB;MACA,MAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf;;MACAD,MAAM,CAACE,MAAP,GAAiBC,GAAD,IAAS;QACvB;;QACA;QACA,MAAMC,IAAI,GAAGD,GAAG,CAACE,MAAJ,CAAWC,MAAxB;QACA,MAAMC,EAAE,GAAGd,IAAI,CAACe,IAAL,CAAUJ,IAAV,EAAgB;UAAEK,IAAI,EAAE;QAAR,CAAhB,CAAX;QACA;;QACA,MAAMC,MAAM,GAAGH,EAAE,CAACI,UAAH,CAAc,CAAd,CAAf;QACA,MAAMC,EAAE,GAAGL,EAAE,CAACM,MAAH,CAAUH,MAAV,CAAX;QACA;;QACA,MAAMI,IAAI,GAAGrB,IAAI,CAACsB,KAAL,CAAWC,YAAX,CAAwBJ,EAAxB,EAA4B;UAAEK,MAAM,EAAE;QAAV,CAA5B,CAAb;QACA;;QACAC,OAAO,CAACC,GAAR,CAAY,YAAYL,IAAxB;MACD,CAZD;;MAaAd,MAAM,CAACoB,kBAAP,CAA0BrB,IAA1B;IACD,CAjBD;;IAmBA,MAAMsB,YAAY,GAAIxB,CAAD,IAAO;MAC1BA,CAAC,CAACyB,cAAF;MAEA,IAAIC,KAAK,GAAG1B,CAAC,CAACQ,MAAF,CAASkB,KAArB;MAAA,IACEC,CAAC,GAAGD,KAAK,CAAC,CAAD,CADX;MAEA,IAAIvB,MAAM,GAAG,IAAIC,UAAJ,EAAb;;MACAD,MAAM,CAACE,MAAP,GAAgB,UAAUL,CAAV,EAAa;QAC3B,IAAIiB,IAAI,GAAGjB,CAAC,CAACQ,MAAF,CAASC,MAApB;QACA,IAAImB,UAAU,GAAGhC,IAAI,CAACe,IAAL,CAAUM,IAAV,EAAgB;UAAEL,IAAI,EAAE;QAAR,CAAhB,CAAjB;QACA,MAAMC,MAAM,GAAGe,UAAU,CAACd,UAAX,CAAsB,CAAtB,CAAf;QACA,MAAMC,EAAE,GAAGa,UAAU,CAACZ,MAAX,CAAkBH,MAAlB,CAAX;QAEA;;QACA,MAAMgB,SAAS,GAAGjC,IAAI,CAACsB,KAAL,CAAWY,aAAX,CAAyBf,EAAzB,EAA6B;UAAEK,MAAM,EAAE;QAAV,CAA7B,CAAlB;QACAW,eAAe,CAACF,SAAD,CAAf;MACD,CATD;;MAUA1B,MAAM,CAACoB,kBAAP,CAA0BI,CAA1B;IACD,CAjBD;;IAmBA,oBACE;MAAA,uBACE;QAAK,SAAS,EAAC,SAAf;QAAA,uBACE;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEH;QAA7B;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF,iBADF;EAOD;;AArF4C;AAwF/C,eAAe3B,eAAf"},"metadata":{},"sourceType":"module"}