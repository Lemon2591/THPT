{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ComponentImport() {\n  _s();\n\n  const [selectFile, setSeclectFie] = useState(); // const processExcelFile = (data) => {\n  //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n  //   const wsName = worlkBook.SheetNames[0];\n  //   const ws = worlkBook.Sheets[wsName];\n  //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //   console.log({ dataParse });\n  //   // var AllSheetName = worlkBook.SheetNames;\n  //   debugger;\n  // };\n\n  const fileSelect = e => {\n    e.preventDefault();\n\n    if (selectFile) {\n      console.log(\"hi\");\n\n      if (selectFile.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        const files = e.target.files;\n        const reader = new FileReader();\n\n        reader.onload = function (e) {\n          console.log(e.target.result); // const data = \"\";\n          // const bytes = new Uint8Array(e.target.result);\n          // for (var i = 0; i < bytes.byteLength; i++) {\n          //   data += String.fromCharCode(bytes[i]);\n          // }\n\n          const bstr = e.target.result;\n          const workbook = XLSX.read(bstr, {\n            type: \"binary\"\n          });\n          console.log(workbook);\n        };\n\n        reader.readAsBinaryString(selectFile);\n      } else {\n        alert(\"Chỉ nhận file .xlsx !\");\n      }\n    }\n  }; //f = file\n  // const fileSelect = (file) => {\n  //   var name = file.name;\n  //   const reader = new FileReader();\n  //   reader.onload = (evt) => {\n  //     // evt = on_file_select event\n  //     /* Parse data */\n  //     const bstr = evt.target.result;\n  //     const wb = XLSX.read(bstr, { type: \"binary\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //     /* Update state */\n  //     console.log(\"Data>>>\" + data);\n  //   };\n  //   reader.readAsBinaryString(file);\n  //   console.log(name);\n  // };\n  // const handleUpload = (e) => {\n  //   e.preventDefault();\n  //   var files = e.target.files,\n  //     f = files[0];\n  //   var reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     var data = e.target.result;\n  //     let readedData = XLSX.read(data, { type: \"binary\" });\n  //     const wsname = readedData.SheetNames[0];\n  //     const ws = readedData.Sheets[wsname];\n  //     /* Convert array to json*/\n  //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     setFileUploaded(dataParse);\n  //   };\n  //   reader.readAsBinaryString(f);\n  // };\n  // const [data, setData] = React.useState([]);\n  // const [cols, setCols] = React.useState([]);\n  // const handleFile = (file) => {\n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     /* Parse data */\n  //     const ab = e.target.result;\n  //     const wb = XLSX.read(ab, { type: \"array\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     /* Update state */\n  //     setData(data);\n  //     setCols(make_cols(ws[\"!ref\"]));\n  //   };\n  //   reader.readAsArrayBuffer(file);\n  // };\n  // const exportFile = () => {\n  //   /* convert state to workbook */\n  //   const ws = XLSX.utils.aoa_to_sheet(data);\n  //   const wb = XLSX.utils.book_new();\n  //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n  //   /* generate XLSX file and send to client */\n  //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => {\n          setSeclectFie(e.target.files[0]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"file-upload-button\",\n        onSubmit: fileSelect,\n        children: \"import\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ComponentImport, \"Hbec3m83DA8La9W4rK65sQvOVtU=\");\n\n_c = ComponentImport;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentImport\");","map":{"version":3,"names":["useState","XLSX","ComponentImport","selectFile","setSeclectFie","fileSelect","e","preventDefault","console","log","type","files","target","reader","FileReader","onload","result","bstr","workbook","read","readAsBinaryString","alert"],"sources":["/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\n\nexport default function ComponentImport() {\n  const [selectFile, setSeclectFie] = useState();\n\n  // const processExcelFile = (data) => {\n  //   var worlkBook = XLSX.read(data, { type: \"binary \" });\n  //   const wsName = worlkBook.SheetNames[0];\n  //   const ws = worlkBook.Sheets[wsName];\n  //   const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //   console.log({ dataParse });\n  //   // var AllSheetName = worlkBook.SheetNames;\n  //   debugger;\n  // };\n\n  const fileSelect = (e) => {\n    e.preventDefault();\n    if (selectFile) {\n      console.log(\"hi\");\n      if (\n        selectFile.type ===\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n      ) {\n        const files = e.target.files;\n        const reader = new FileReader();\n        reader.onload = function (e) {\n          console.log(e.target.result);\n          // const data = \"\";\n          // const bytes = new Uint8Array(e.target.result);\n          // for (var i = 0; i < bytes.byteLength; i++) {\n          //   data += String.fromCharCode(bytes[i]);\n          // }\n          const bstr = e.target.result;\n          const workbook = XLSX.read(bstr, {\n            type: \"binary\",\n          });\n          console.log(workbook);\n        };\n        reader.readAsBinaryString(selectFile);\n      } else {\n        alert(\"Chỉ nhận file .xlsx !\");\n      }\n    }\n  };\n\n  //f = file\n\n  // const fileSelect = (file) => {\n  //   var name = file.name;\n  //   const reader = new FileReader();\n  //   reader.onload = (evt) => {\n  //     // evt = on_file_select event\n  //     /* Parse data */\n  //     const bstr = evt.target.result;\n  //     const wb = XLSX.read(bstr, { type: \"binary\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //     /* Update state */\n  //     console.log(\"Data>>>\" + data);\n  //   };\n  //   reader.readAsBinaryString(file);\n  //   console.log(name);\n  // };\n\n  // const handleUpload = (e) => {\n  //   e.preventDefault();\n\n  //   var files = e.target.files,\n  //     f = files[0];\n  //   var reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     var data = e.target.result;\n  //     let readedData = XLSX.read(data, { type: \"binary\" });\n  //     const wsname = readedData.SheetNames[0];\n  //     const ws = readedData.Sheets[wsname];\n\n  //     /* Convert array to json*/\n  //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     setFileUploaded(dataParse);\n  //   };\n  //   reader.readAsBinaryString(f);\n  // };\n\n  // const [data, setData] = React.useState([]);\n  // const [cols, setCols] = React.useState([]);\n\n  // const handleFile = (file) => {\n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     /* Parse data */\n  //     const ab = e.target.result;\n  //     const wb = XLSX.read(ab, { type: \"array\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     /* Update state */\n  //     setData(data);\n  //     setCols(make_cols(ws[\"!ref\"]));\n  //   };\n  //   reader.readAsArrayBuffer(file);\n  // };\n\n  // const exportFile = () => {\n  //   /* convert state to workbook */\n  //   const ws = XLSX.utils.aoa_to_sheet(data);\n  //   const wb = XLSX.utils.book_new();\n  //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n  //   /* generate XLSX file and send to client */\n  //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  // };\n\n  return (\n    <>\n      <div className=\"content\">\n        <input\n          type=\"file\"\n          onChange={(e) => {\n            setSeclectFie(e.target.files[0]);\n          }}\n        ></input>\n        <button\n          type=\"button\"\n          className=\"file-upload-button\"\n          onSubmit={fileSelect}\n        >\n          import\n        </button>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,uBAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;;AAEA,eAAe,SAASC,eAAT,GAA2B;EAAA;;EACxC,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,EAA5C,CADwC,CAGxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMK,UAAU,GAAIC,CAAD,IAAO;IACxBA,CAAC,CAACC,cAAF;;IACA,IAAIJ,UAAJ,EAAgB;MACdK,OAAO,CAACC,GAAR,CAAY,IAAZ;;MACA,IACEN,UAAU,CAACO,IAAX,KACA,mEAFF,EAGE;QACA,MAAMC,KAAK,GAAGL,CAAC,CAACM,MAAF,CAASD,KAAvB;QACA,MAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf;;QACAD,MAAM,CAACE,MAAP,GAAgB,UAAUT,CAAV,EAAa;UAC3BE,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACM,MAAF,CAASI,MAArB,EAD2B,CAE3B;UACA;UACA;UACA;UACA;;UACA,MAAMC,IAAI,GAAGX,CAAC,CAACM,MAAF,CAASI,MAAtB;UACA,MAAME,QAAQ,GAAGjB,IAAI,CAACkB,IAAL,CAAUF,IAAV,EAAgB;YAC/BP,IAAI,EAAE;UADyB,CAAhB,CAAjB;UAGAF,OAAO,CAACC,GAAR,CAAYS,QAAZ;QACD,CAZD;;QAaAL,MAAM,CAACO,kBAAP,CAA0BjB,UAA1B;MACD,CApBD,MAoBO;QACLkB,KAAK,CAAC,uBAAD,CAAL;MACD;IACF;EACF,CA5BD,CAbwC,CA2CxC;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,SAAf;MAAA,wBACE;QACE,IAAI,EAAC,MADP;QAEE,QAAQ,EAAGf,CAAD,IAAO;UACfF,aAAa,CAACE,CAAC,CAACM,MAAF,CAASD,KAAT,CAAe,CAAf,CAAD,CAAb;QACD;MAJH;QAAA;QAAA;QAAA;MAAA,QADF,eAOE;QACE,IAAI,EAAC,QADP;QAEE,SAAS,EAAC,oBAFZ;QAGE,QAAQ,EAAEN,UAHZ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAmBD;;GArIuBH,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}