{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js\";\nimport React, { useState, Component } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ComponentImport extends Component {\n  render() {\n    const fileData = {};\n\n    const processExcelFile = data => {\n      var worlkBook = XLSX.read(data, {\n        type: \"binary \"\n      });\n      const wsName = worlkBook.SheetNames[0];\n      const ws = worlkBook.Sheets[wsName];\n      const dataParse = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      console.log({\n        dataParse\n      }); // var AllSheetName = worlkBook.SheetNames;\n\n      debugger;\n    };\n\n    const fileSelect = e => {\n      const files = e.target.files;\n      fileData[\"fileName\"] = files[0].name;\n      const reader = new FileReader();\n\n      if (typeof FileList != \"undefined\") {\n        console.log(\"hi\");\n\n        if (reader.readAsBinaryString) {\n          reader.onload = function (e) {\n            processExcelFile(e.target.result);\n          };\n        }\n      } else {\n        reader.onload = function (e) {\n          const data = \"\";\n          const bytes = new Uint8Array(e.target.result);\n\n          for (var i = 0; i < bytes.byteLength; i++) {\n            data += String.fromCharCode(bytes[i]);\n          }\n\n          processExcelFile(data);\n        };\n      }\n\n      console.log(files);\n    }; //f = file\n    // const fileSelect = (file) => {\n    //   var name = file.name;\n    //   const reader = new FileReader();\n    //   reader.onload = (evt) => {\n    //     // evt = on_file_select event\n    //     /* Parse data */\n    //     const bstr = evt.target.result;\n    //     const wb = XLSX.read(bstr, { type: \"binary\" });\n    //     /* Get first worksheet */\n    //     const wsname = wb.SheetNames[0];\n    //     const ws = wb.Sheets[wsname];\n    //     /* Convert array of arrays */\n    //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n    //     /* Update state */\n    //     console.log(\"Data>>>\" + data);\n    //   };\n    //   reader.readAsBinaryString(file);\n    //   console.log(name);\n    // };\n    // const handleUpload = (e) => {\n    //   e.preventDefault();\n    //   var files = e.target.files,\n    //     f = files[0];\n    //   var reader = new FileReader();\n    //   reader.onload = function (e) {\n    //     var data = e.target.result;\n    //     let readedData = XLSX.read(data, { type: \"binary\" });\n    //     const wsname = readedData.SheetNames[0];\n    //     const ws = readedData.Sheets[wsname];\n    //     /* Convert array to json*/\n    //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //     setFileUploaded(dataParse);\n    //   };\n    //   reader.readAsBinaryString(f);\n    // };\n    // const [data, setData] = React.useState([]);\n    // const [cols, setCols] = React.useState([]);\n    // const handleFile = (file) => {\n    //   const reader = new FileReader();\n    //   reader.onload = (e) => {\n    //     /* Parse data */\n    //     const ab = e.target.result;\n    //     const wb = XLSX.read(ab, { type: \"array\" });\n    //     /* Get first worksheet */\n    //     const wsname = wb.SheetNames[0];\n    //     const ws = wb.Sheets[wsname];\n    //     /* Convert array of arrays */\n    //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //     /* Update state */\n    //     setData(data);\n    //     setCols(make_cols(ws[\"!ref\"]));\n    //   };\n    //   reader.readAsArrayBuffer(file);\n    // };\n    // const exportFile = () => {\n    //   /* convert state to workbook */\n    //   const ws = XLSX.utils.aoa_to_sheet(data);\n    //   const wb = XLSX.utils.book_new();\n    //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    //   /* generate XLSX file and send to client */\n    //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n    // };\n\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: fileSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport default ComponentImport;","map":{"version":3,"names":["React","useState","Component","XLSX","ComponentImport","render","fileData","processExcelFile","data","worlkBook","read","type","wsName","SheetNames","ws","Sheets","dataParse","utils","sheet_to_json","header","console","log","fileSelect","e","files","target","name","reader","FileReader","FileList","readAsBinaryString","onload","result","bytes","Uint8Array","i","byteLength","String","fromCharCode"],"sources":["/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js"],"sourcesContent":["import React, { useState, Component } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\n\nexport class ComponentImport extends Component {\n  render() {\n    const fileData = {};\n\n    const processExcelFile = (data) => {\n      var worlkBook = XLSX.read(data, { type: \"binary \" });\n      const wsName = worlkBook.SheetNames[0];\n      const ws = worlkBook.Sheets[wsName];\n      const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      console.log({ dataParse });\n      // var AllSheetName = worlkBook.SheetNames;\n      debugger;\n    };\n\n    const fileSelect = (e) => {\n      const files = e.target.files;\n      fileData[\"fileName\"] = files[0].name;\n\n      const reader = new FileReader();\n      if (typeof FileList != \"undefined\") {\n        console.log(\"hi\");\n        if (reader.readAsBinaryString) {\n          reader.onload = function (e) {\n            processExcelFile(e.target.result);\n          };\n        }\n      } else {\n        reader.onload = function (e) {\n          const data = \"\";\n          const bytes = new Uint8Array(e.target.result);\n          for (var i = 0; i < bytes.byteLength; i++) {\n            data += String.fromCharCode(bytes[i]);\n          }\n          processExcelFile(data);\n        };\n      }\n      console.log(files);\n    };\n\n    //f = file\n\n    // const fileSelect = (file) => {\n    //   var name = file.name;\n    //   const reader = new FileReader();\n    //   reader.onload = (evt) => {\n    //     // evt = on_file_select event\n    //     /* Parse data */\n    //     const bstr = evt.target.result;\n    //     const wb = XLSX.read(bstr, { type: \"binary\" });\n    //     /* Get first worksheet */\n    //     const wsname = wb.SheetNames[0];\n    //     const ws = wb.Sheets[wsname];\n    //     /* Convert array of arrays */\n    //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n    //     /* Update state */\n    //     console.log(\"Data>>>\" + data);\n    //   };\n    //   reader.readAsBinaryString(file);\n    //   console.log(name);\n    // };\n\n    // const handleUpload = (e) => {\n    //   e.preventDefault();\n\n    //   var files = e.target.files,\n    //     f = files[0];\n    //   var reader = new FileReader();\n    //   reader.onload = function (e) {\n    //     var data = e.target.result;\n    //     let readedData = XLSX.read(data, { type: \"binary\" });\n    //     const wsname = readedData.SheetNames[0];\n    //     const ws = readedData.Sheets[wsname];\n\n    //     /* Convert array to json*/\n    //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //     setFileUploaded(dataParse);\n    //   };\n    //   reader.readAsBinaryString(f);\n    // };\n\n    // const [data, setData] = React.useState([]);\n    // const [cols, setCols] = React.useState([]);\n\n    // const handleFile = (file) => {\n    //   const reader = new FileReader();\n    //   reader.onload = (e) => {\n    //     /* Parse data */\n    //     const ab = e.target.result;\n    //     const wb = XLSX.read(ab, { type: \"array\" });\n    //     /* Get first worksheet */\n    //     const wsname = wb.SheetNames[0];\n    //     const ws = wb.Sheets[wsname];\n    //     /* Convert array of arrays */\n    //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    //     /* Update state */\n    //     setData(data);\n    //     setCols(make_cols(ws[\"!ref\"]));\n    //   };\n    //   reader.readAsArrayBuffer(file);\n    // };\n\n    // const exportFile = () => {\n    //   /* convert state to workbook */\n    //   const ws = XLSX.utils.aoa_to_sheet(data);\n    //   const wb = XLSX.utils.book_new();\n    //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    //   /* generate XLSX file and send to client */\n    //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n    // };\n\n    return (\n      <>\n        <div className=\"content\">\n          <input type=\"file\" onChange={fileSelect}></input>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ComponentImport;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,uBAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;;AAEA,OAAO,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;EAC7CG,MAAM,GAAG;IACP,MAAMC,QAAQ,GAAG,EAAjB;;IAEA,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;MACjC,IAAIC,SAAS,GAAGN,IAAI,CAACO,IAAL,CAAUF,IAAV,EAAgB;QAAEG,IAAI,EAAE;MAAR,CAAhB,CAAhB;MACA,MAAMC,MAAM,GAAGH,SAAS,CAACI,UAAV,CAAqB,CAArB,CAAf;MACA,MAAMC,EAAE,GAAGL,SAAS,CAACM,MAAV,CAAiBH,MAAjB,CAAX;MACA,MAAMI,SAAS,GAAGb,IAAI,CAACc,KAAL,CAAWC,aAAX,CAAyBJ,EAAzB,EAA6B;QAAEK,MAAM,EAAE;MAAV,CAA7B,CAAlB;MACAC,OAAO,CAACC,GAAR,CAAY;QAAEL;MAAF,CAAZ,EALiC,CAMjC;;MACA;IACD,CARD;;IAUA,MAAMM,UAAU,GAAIC,CAAD,IAAO;MACxB,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;MACAlB,QAAQ,CAAC,UAAD,CAAR,GAAuBkB,KAAK,CAAC,CAAD,CAAL,CAASE,IAAhC;MAEA,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;MACA,IAAI,OAAOC,QAAP,IAAmB,WAAvB,EAAoC;QAClCT,OAAO,CAACC,GAAR,CAAY,IAAZ;;QACA,IAAIM,MAAM,CAACG,kBAAX,EAA+B;UAC7BH,MAAM,CAACI,MAAP,GAAgB,UAAUR,CAAV,EAAa;YAC3BhB,gBAAgB,CAACgB,CAAC,CAACE,MAAF,CAASO,MAAV,CAAhB;UACD,CAFD;QAGD;MACF,CAPD,MAOO;QACLL,MAAM,CAACI,MAAP,GAAgB,UAAUR,CAAV,EAAa;UAC3B,MAAMf,IAAI,GAAG,EAAb;UACA,MAAMyB,KAAK,GAAG,IAAIC,UAAJ,CAAeX,CAAC,CAACE,MAAF,CAASO,MAAxB,CAAd;;UACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,UAA1B,EAAsCD,CAAC,EAAvC,EAA2C;YACzC3B,IAAI,IAAI6B,MAAM,CAACC,YAAP,CAAoBL,KAAK,CAACE,CAAD,CAAzB,CAAR;UACD;;UACD5B,gBAAgB,CAACC,IAAD,CAAhB;QACD,CAPD;MAQD;;MACDY,OAAO,CAACC,GAAR,CAAYG,KAAZ;IACD,CAvBD,CAbO,CAsCP;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IAEA,oBACE;MAAA,uBACE;QAAK,SAAS,EAAC,SAAf;QAAA,uBACE;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEF;QAA7B;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF,iBADF;EAOD;;AArH4C;AAwH/C,eAAelB,eAAf"},"metadata":{},"sourceType":"module"}