{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ComponentImport() {\n  _s();\n\n  const [selectFile, setSeclectFie] = useState();\n\n  const handleImport = () => {};\n\n  const processExcelFile = data => {\n    var worlkBook = XLSX.read(data, {\n      type: \"binary \"\n    });\n    const wsName = worlkBook.SheetNames[0];\n    const ws = worlkBook.Sheets[wsName];\n    const dataParse = XLSX.utils.sheet_to_json(ws, {\n      header: 1\n    });\n    console.log({\n      dataParse\n    }); // var AllSheetName = worlkBook.SheetNames;\n\n    debugger;\n  };\n\n  const fileSelect = e => {\n    const files = e.target.files; // fileData[\"fileName\"] = files[0].name;\n\n    const reader = new FileReader(); // if (typeof FileList != \"undefined\") {\n    //   // if () {\n    //   //   console.log(\"hi\");\n    //   //   reader.onload = function (e) {\n    //   //     processExcelFile(e.target.result);\n    //   //   };\n    //   // }\n    // } else {\n\n    reader.onload = function (e) {\n      console.log(e.target.result);\n      const data = \"\";\n      const bytes = new Uint8Array(e.target.result);\n\n      for (var i = 0; i < bytes.byteLength; i++) {\n        data += String.fromCharCode(bytes[i]);\n      }\n\n      var workbook = XLSX.read(e.target.result, {\n        type: \"binary\"\n      });\n      console.log(workbook);\n      processExcelFile(data);\n    };\n\n    reader.readAsBinaryString(files[0]);\n  }; //f = file\n  // const fileSelect = (file) => {\n  //   var name = file.name;\n  //   const reader = new FileReader();\n  //   reader.onload = (evt) => {\n  //     // evt = on_file_select event\n  //     /* Parse data */\n  //     const bstr = evt.target.result;\n  //     const wb = XLSX.read(bstr, { type: \"binary\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //     /* Update state */\n  //     console.log(\"Data>>>\" + data);\n  //   };\n  //   reader.readAsBinaryString(file);\n  //   console.log(name);\n  // };\n  // const handleUpload = (e) => {\n  //   e.preventDefault();\n  //   var files = e.target.files,\n  //     f = files[0];\n  //   var reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     var data = e.target.result;\n  //     let readedData = XLSX.read(data, { type: \"binary\" });\n  //     const wsname = readedData.SheetNames[0];\n  //     const ws = readedData.Sheets[wsname];\n  //     /* Convert array to json*/\n  //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     setFileUploaded(dataParse);\n  //   };\n  //   reader.readAsBinaryString(f);\n  // };\n  // const [data, setData] = React.useState([]);\n  // const [cols, setCols] = React.useState([]);\n  // const handleFile = (file) => {\n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     /* Parse data */\n  //     const ab = e.target.result;\n  //     const wb = XLSX.read(ab, { type: \"array\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     /* Update state */\n  //     setData(data);\n  //     setCols(make_cols(ws[\"!ref\"]));\n  //   };\n  //   reader.readAsArrayBuffer(file);\n  // };\n  // const exportFile = () => {\n  //   /* convert state to workbook */\n  //   const ws = XLSX.utils.aoa_to_sheet(data);\n  //   const wb = XLSX.utils.book_new();\n  //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n  //   /* generate XLSX file and send to client */\n  //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: fileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ComponentImport, \"Hbec3m83DA8La9W4rK65sQvOVtU=\");\n\n_c = ComponentImport;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentImport\");","map":{"version":3,"names":["useState","XLSX","ComponentImport","selectFile","setSeclectFie","handleImport","processExcelFile","data","worlkBook","read","type","wsName","SheetNames","ws","Sheets","dataParse","utils","sheet_to_json","header","console","log","fileSelect","e","files","target","reader","FileReader","onload","result","bytes","Uint8Array","i","byteLength","String","fromCharCode","workbook","readAsBinaryString"],"sources":["/Users/user/Documents/MasterDevSS4.ReactJS/master-dev-data/src/component-import/ComponentImport.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./ComponentImport.css\";\nimport * as XLSX from \"xlsx\";\n\nexport default function ComponentImport() {\n  const [selectFile, setSeclectFie] = useState();\n\n  const handleImport = () => {};\n  const processExcelFile = (data) => {\n    var worlkBook = XLSX.read(data, { type: \"binary \" });\n    const wsName = worlkBook.SheetNames[0];\n    const ws = worlkBook.Sheets[wsName];\n    const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n    console.log({ dataParse });\n    // var AllSheetName = worlkBook.SheetNames;\n    debugger;\n  };\n\n  const fileSelect = (e) => {\n    const files = e.target.files;\n    // fileData[\"fileName\"] = files[0].name;\n\n    const reader = new FileReader();\n\n    // if (typeof FileList != \"undefined\") {\n    //   // if () {\n    //   //   console.log(\"hi\");\n    //   //   reader.onload = function (e) {\n    //   //     processExcelFile(e.target.result);\n    //   //   };\n    //   // }\n    // } else {\n    reader.onload = function (e) {\n      console.log(e.target.result);\n      const data = \"\";\n      const bytes = new Uint8Array(e.target.result);\n      for (var i = 0; i < bytes.byteLength; i++) {\n        data += String.fromCharCode(bytes[i]);\n      }\n      var workbook = XLSX.read(e.target.result, {\n        type: \"binary\",\n      });\n      console.log(workbook);\n      processExcelFile(data);\n    };\n    reader.readAsBinaryString(files[0]);\n  };\n\n  //f = file\n\n  // const fileSelect = (file) => {\n  //   var name = file.name;\n  //   const reader = new FileReader();\n  //   reader.onload = (evt) => {\n  //     // evt = on_file_select event\n  //     /* Parse data */\n  //     const bstr = evt.target.result;\n  //     const wb = XLSX.read(bstr, { type: \"binary\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n  //     /* Update state */\n  //     console.log(\"Data>>>\" + data);\n  //   };\n  //   reader.readAsBinaryString(file);\n  //   console.log(name);\n  // };\n\n  // const handleUpload = (e) => {\n  //   e.preventDefault();\n\n  //   var files = e.target.files,\n  //     f = files[0];\n  //   var reader = new FileReader();\n  //   reader.onload = function (e) {\n  //     var data = e.target.result;\n  //     let readedData = XLSX.read(data, { type: \"binary\" });\n  //     const wsname = readedData.SheetNames[0];\n  //     const ws = readedData.Sheets[wsname];\n\n  //     /* Convert array to json*/\n  //     const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     setFileUploaded(dataParse);\n  //   };\n  //   reader.readAsBinaryString(f);\n  // };\n\n  // const [data, setData] = React.useState([]);\n  // const [cols, setCols] = React.useState([]);\n\n  // const handleFile = (file) => {\n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     /* Parse data */\n  //     const ab = e.target.result;\n  //     const wb = XLSX.read(ab, { type: \"array\" });\n  //     /* Get first worksheet */\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     /* Convert array of arrays */\n  //     const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n  //     /* Update state */\n  //     setData(data);\n  //     setCols(make_cols(ws[\"!ref\"]));\n  //   };\n  //   reader.readAsArrayBuffer(file);\n  // };\n\n  // const exportFile = () => {\n  //   /* convert state to workbook */\n  //   const ws = XLSX.utils.aoa_to_sheet(data);\n  //   const wb = XLSX.utils.book_new();\n  //   XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n  //   /* generate XLSX file and send to client */\n  //   XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  // };\n\n  return (\n    <>\n      <div className=\"content\">\n        <input type=\"file\" onChange={fileSelect}></input>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,uBAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;;AAEA,eAAe,SAASC,eAAT,GAA2B;EAAA;;EACxC,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,EAA5C;;EAEA,MAAMK,YAAY,GAAG,MAAM,CAAE,CAA7B;;EACA,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;IACjC,IAAIC,SAAS,GAAGP,IAAI,CAACQ,IAAL,CAAUF,IAAV,EAAgB;MAAEG,IAAI,EAAE;IAAR,CAAhB,CAAhB;IACA,MAAMC,MAAM,GAAGH,SAAS,CAACI,UAAV,CAAqB,CAArB,CAAf;IACA,MAAMC,EAAE,GAAGL,SAAS,CAACM,MAAV,CAAiBH,MAAjB,CAAX;IACA,MAAMI,SAAS,GAAGd,IAAI,CAACe,KAAL,CAAWC,aAAX,CAAyBJ,EAAzB,EAA6B;MAAEK,MAAM,EAAE;IAAV,CAA7B,CAAlB;IACAC,OAAO,CAACC,GAAR,CAAY;MAAEL;IAAF,CAAZ,EALiC,CAMjC;;IACA;EACD,CARD;;EAUA,MAAMM,UAAU,GAAIC,CAAD,IAAO;IACxB,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB,CADwB,CAExB;;IAEA,MAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf,CAJwB,CAMxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACAD,MAAM,CAACE,MAAP,GAAgB,UAAUL,CAAV,EAAa;MAC3BH,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACE,MAAF,CAASI,MAArB;MACA,MAAMrB,IAAI,GAAG,EAAb;MACA,MAAMsB,KAAK,GAAG,IAAIC,UAAJ,CAAeR,CAAC,CAACE,MAAF,CAASI,MAAxB,CAAd;;MACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,UAA1B,EAAsCD,CAAC,EAAvC,EAA2C;QACzCxB,IAAI,IAAI0B,MAAM,CAACC,YAAP,CAAoBL,KAAK,CAACE,CAAD,CAAzB,CAAR;MACD;;MACD,IAAII,QAAQ,GAAGlC,IAAI,CAACQ,IAAL,CAAUa,CAAC,CAACE,MAAF,CAASI,MAAnB,EAA2B;QACxClB,IAAI,EAAE;MADkC,CAA3B,CAAf;MAGAS,OAAO,CAACC,GAAR,CAAYe,QAAZ;MACA7B,gBAAgB,CAACC,IAAD,CAAhB;IACD,CAZD;;IAaAkB,MAAM,CAACW,kBAAP,CAA0Bb,KAAK,CAAC,CAAD,CAA/B;EACD,CA5BD,CAdwC,CA4CxC;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,SAAf;MAAA,uBACE;QAAO,IAAI,EAAC,MAAZ;QAAmB,QAAQ,EAAEF;MAA7B;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAOD;;GA1HuBnB,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}